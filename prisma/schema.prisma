// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id             Int      @id @default(autoincrement())
    description    String
    maxPersonCount Int
    featuredUsers  User[]   @relation("UserPost")
    images         Image[]
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    createdBy   User      @relation(fields: [createdById], references: [id])
    createdById String
    requests    Request[]
}

model Image {
    id        String   @id
    url       String
    createdAt DateTime @default(now())
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String    @id @default(cuid())
    name             String?
    email            String?   @unique
    emailVerified    DateTime?
    image            String?
    socialLink       String?
    about            String?
    accounts         Account[]
    sessions         Session[]
    posts            Post[]
    featuredPosts    Post[]    @relation("UserPost")
    reviewsGiven     Review[]  @relation("ReviewsGiven")
    reviewsReceived  Review[]  @relation("ReviewsReceived")
    requestedPosts   Request[] @relation("UserInvitedRequests")
    modifiedRequests Request[] @relation("UserModifiedRequests")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Review {
    id        String   @id @default(cuid())
    rating    Int
    comment   String?
    createdAt DateTime @default(now())

    reviewerId String
    reviewedId String

    reviewer User @relation("ReviewsGiven", fields: [reviewerId], references: [id])
    reviewed User @relation("ReviewsReceived", fields: [reviewedId], references: [id])

    @@unique([reviewerId, reviewedId])
}

model Request {
    id           String        @id @default(cuid())
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    status       RequestStatus @default(PENDING)
    comment      String?
    postId       Int
    post         Post          @relation(fields: [postId], references: [id])
    userId       String
    user         User          @relation("UserInvitedRequests", fields: [userId], references: [id])
    modifiedById String?
    modifiedBy   User?         @relation("UserModifiedRequests", fields: [modifiedById], references: [id])

    @@unique([userId, postId])
}

enum RequestStatus {
    PENDING
    ACCEPTED
    DENIED
}
